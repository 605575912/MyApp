apply plugin: 'com.android.application'
dependencies {
}
android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        applicationId "com.auto.launcher"
        minSdkVersion 10
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        debug {
            // No debug config
            storeFile file("xili123.keystore")
            storePassword "xili123"
            keyAlias "xili123.keystore"
            keyPassword "xili123"
        }

        release {
            storeFile file("xili123.keystore")
            storePassword "xili123"
            keyAlias "xili123.keystore"
            keyPassword "xili123"
        }
    }
    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "true"

            minifyEnabled true //混淆
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "${variant.productFlavors[0].name}_${defaultConfig.versionName}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }
    productFlavors {
        launcher { buildConfigField "boolean", "AUTO_UPDATES", "false" }
//        GoolePlay { buildConfigField "boolean", "AUTO_UPDATES", "false" }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

}


//定义一个函数，target是生成jar包的文件名，classDir是class文件所在的文件夹
def makeJar(String target,String classDir){
    exec{
        executable "jar"   //调用jar
        args "cvf",target
        args "-C", classDir
        args "","."


    }
}
//新建一个task,名为buildLib,依赖build(build是一个自带的task)
task buildLib(dependsOn:['build'])<< {
    makeJar("volley.jar","../build/intermediates/classes/launcher/release")


}
